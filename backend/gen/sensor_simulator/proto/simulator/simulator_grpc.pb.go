// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0--rc1
// source: simulator.proto

package simulator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SensorSimulatorService_AddSensor_FullMethodName    = "/simulator.SensorSimulatorService/AddSensor"
	SensorSimulatorService_DeleteSensor_FullMethodName = "/simulator.SensorSimulatorService/DeleteSensor"
	SensorSimulatorService_Start_FullMethodName        = "/simulator.SensorSimulatorService/Start"
	SensorSimulatorService_Stop_FullMethodName         = "/simulator.SensorSimulatorService/Stop"
)

// SensorSimulatorServiceClient is the client API for SensorSimulatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorSimulatorServiceClient interface {
	AddSensor(ctx context.Context, in *AddSensorRequest, opts ...grpc.CallOption) (*AddSensorResponse, error)
	DeleteSensor(ctx context.Context, in *DeleteSensorRequest, opts ...grpc.CallOption) (*DeleteSensorResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type sensorSimulatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorSimulatorServiceClient(cc grpc.ClientConnInterface) SensorSimulatorServiceClient {
	return &sensorSimulatorServiceClient{cc}
}

func (c *sensorSimulatorServiceClient) AddSensor(ctx context.Context, in *AddSensorRequest, opts ...grpc.CallOption) (*AddSensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSensorResponse)
	err := c.cc.Invoke(ctx, SensorSimulatorService_AddSensor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorSimulatorServiceClient) DeleteSensor(ctx context.Context, in *DeleteSensorRequest, opts ...grpc.CallOption) (*DeleteSensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSensorResponse)
	err := c.cc.Invoke(ctx, SensorSimulatorService_DeleteSensor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorSimulatorServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, SensorSimulatorService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorSimulatorServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, SensorSimulatorService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorSimulatorServiceServer is the server API for SensorSimulatorService service.
// All implementations must embed UnimplementedSensorSimulatorServiceServer
// for forward compatibility.
type SensorSimulatorServiceServer interface {
	AddSensor(context.Context, *AddSensorRequest) (*AddSensorResponse, error)
	DeleteSensor(context.Context, *DeleteSensorRequest) (*DeleteSensorResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedSensorSimulatorServiceServer()
}

// UnimplementedSensorSimulatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSensorSimulatorServiceServer struct{}

func (UnimplementedSensorSimulatorServiceServer) AddSensor(context.Context, *AddSensorRequest) (*AddSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSensor not implemented")
}
func (UnimplementedSensorSimulatorServiceServer) DeleteSensor(context.Context, *DeleteSensorRequest) (*DeleteSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensor not implemented")
}
func (UnimplementedSensorSimulatorServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedSensorSimulatorServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedSensorSimulatorServiceServer) mustEmbedUnimplementedSensorSimulatorServiceServer() {
}
func (UnimplementedSensorSimulatorServiceServer) testEmbeddedByValue() {}

// UnsafeSensorSimulatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorSimulatorServiceServer will
// result in compilation errors.
type UnsafeSensorSimulatorServiceServer interface {
	mustEmbedUnimplementedSensorSimulatorServiceServer()
}

func RegisterSensorSimulatorServiceServer(s grpc.ServiceRegistrar, srv SensorSimulatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedSensorSimulatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SensorSimulatorService_ServiceDesc, srv)
}

func _SensorSimulatorService_AddSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSimulatorServiceServer).AddSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorSimulatorService_AddSensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSimulatorServiceServer).AddSensor(ctx, req.(*AddSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorSimulatorService_DeleteSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSimulatorServiceServer).DeleteSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorSimulatorService_DeleteSensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSimulatorServiceServer).DeleteSensor(ctx, req.(*DeleteSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorSimulatorService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSimulatorServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorSimulatorService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSimulatorServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorSimulatorService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSimulatorServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorSimulatorService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSimulatorServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorSimulatorService_ServiceDesc is the grpc.ServiceDesc for SensorSimulatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorSimulatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulator.SensorSimulatorService",
	HandlerType: (*SensorSimulatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSensor",
			Handler:    _SensorSimulatorService_AddSensor_Handler,
		},
		{
			MethodName: "DeleteSensor",
			Handler:    _SensorSimulatorService_DeleteSensor_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _SensorSimulatorService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _SensorSimulatorService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simulator.proto",
}
